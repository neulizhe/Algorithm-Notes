1认识复杂度和简单排序算法
1.1常数操作
	与数据量的大小无关
	int a = arr[i];  计算一个偏移量即可，属于常数操作
	list.get(i);  链表需要一个一个遍历，一个一个跳，不是常数操作
	加减乘除是常数操作

1.2选择排序
1.2.1原理
	0~N-1，找到最小值的索引，值放到0位置上；
	1~N-1，找到最小值的索引，值放到1位置上；
	……
1.2.2时间复杂度（常数操作数量的指标）
	看：N + (N-1) + (N-2)+……
	比：N + (N-1) + (N-2)+……
	换：N
	常数操作次数 = aN²+ bN + c，不要低阶项，不要系数
	O(N²)
1.2.3评价算法好坏
	先看时间复杂度，当时间复杂度相同时，再分析实际运行时间（如加减乘除与位运算或与异或），以此比较出常数项时间
1.2.4代码
void selectSort(int* arr, int len)
{
	if (arr == NULL || len < 2)
	{
		return;
	}
	for (int i = 0; i < len-1; i++)	//i~N-1
	{
		int minIndex = i;	//记录最小值的索引
		for (int j = i + 1; j < len; j++)	//i~N-1
		{
			minIndex = arr[j] < arr[minIndex] ? j : minIndex;
		}
		swap(arr, i, minIndex);
	}
}

1.2.5额外空间复杂度
	额外空间复杂度O(1)——只需要几个额外变量
	若是需要额外数组，且大小与原数组相同，则为O(N)

1.3冒泡排序
1.3.1原理
	每次都从0位置开始，相邻谁大谁右移，第一轮搞定N-1位置上的数，第二轮搞定N-2位置上的数
1.3.2时间复杂度
	O(N²)
1.3.3额外空间复杂度
	O(1)
1.3.4代码
void bubbleSort(int* arr, int len)
{
	if (arr == NULL || len < 2)
	{
		return;
	}
	for (int end = len - 1; end > 0; end--)	//每次搞定最后一个数, N-1, N-2,
	{
		for (int j = 0; j < end; j++)	//0~end
		{
			if (arr[j] > arr[j + 1])	//相邻谁大谁右移
			{
				swap(arr, j, j + 1);
			}
		}
	}
}

1.4异或^
1.4.1基本原理
	两个数异或，相同为0不同为1。或者理解为无进位相加。
	0 ^ N = N
	N ^ N = 0
	满足交换律和结合律
	一堆数异或，只跟数量有关，与顺序无关
1.4.2 swap（数组中前提：i、j是内存的两块不同位置）
int a = 甲;
int b = 乙;
a = a ^ b;	a = 甲^乙；b = 乙；
b = a ^ b;	a = 甲^乙；b = 甲^乙^乙 = 甲；
a = a ^ b;	a = 甲^乙^甲 = 乙；b = 甲；

1.5异或面试题
1.5.1问题描述
	一个数组内全是int，只有一种数出现了奇数次，其他出现了偶数次
	如何找到出现奇数次的数？
	如果两种数出现了奇数次，其他偶数次，如何找出这两个数？
1.5.2第一问解
	准备一个eor = 0，把数组内的每一个数都异或一遍，得到的结果即为出现奇数次的数。
void printOddTimesNum1(int* arr, int len)
{
	int eor = 0;
	for (int i = 0; i < len; i++)
	{
		eor ^= arr[i];
	}
	cout << eor << endl;
}
注：无进位相加。每一位的值由所有数该位上的1的个数决定。
1.5.3第二问解
	先准备一个eor，把数组所有数都异或一遍，最终eor = a ^ b
	由于a≠b，那么eor≠0，说明eor的某一位不等于0，即eor的某一位是1
	假设第八位是1，说明a、b的第八位不同，一个是1一个是0
	准备一个新的eor’，把所有第八位是1的数异或一遍，就可以得到a或者b
	再用eor’异或eor，得到另一个数
出现偶数次的other1

a和b不在同一个集合内，假设a在这

a

eor’异或第八位是1的所有数
eor’ = a；eor’ ^ eor = b；
第八位是1	出现偶数次的other2



b



第八位是0

找到最右侧的1，eor & (~eor + 1)
eor	1010111100
~eor 0101000011
~eor + 1 0101000100
eor & (~eor + 1) 0000000100

找这一位上全是1的数，arr[i] & onlyOne == 1
	一个数“与”上0000000100，想得到1，那么这个数的右边第三位上一定是1，这样通过遍历就找出了所有这一位上是1的数。

void printOddTimesNum2(int* arr, int len)
{
	int eor = 0;
	for (int i = 0; i < len; i++)
	{
		eor ^= arr[i];
	}
	//此时eor = a^b
	//eor != 0
	//eor必有一个位置上是1
	//我们选最右侧的1
	int rightOne = eor & (~eor + 1);

	int onlyOne = 0; //eor'
	for (int i = 0; i < len; i++)
	{
		if ((arr[i] & rightOne) == 1)	//这一位是1的数
		{
			onlyOne ^= arr[i];	//才^
		}
	}
	cout << onlyOne << " " << (eor ^ onlyOne) << endl;
}

1.6插入排序
1.6.1原理（斗地主抓牌）
	0~0有序
	0~1，拿索引为1的数往前看，比左小换，一直比下去，直到不换为止
	0~2，拿索引为2的数往前看……
	第i轮拿第i个数往左比
1.6.2时间复杂度
	数据状况不同，时间复杂度不同，最差交换次数O(N²)，最好O(N)
1.6.3额外空间复杂度
O(1)
1.6.4代码
void insertionSort(int* arr, int len)
{
	if (arr == NULL || len < 2)
	{
		return;
	}
	//0~0有序，0~i想有序
	for (int i = 1; i < len; i++)
	{
		for (int j = i - 1; j >= 0 && arr[j] > arr[j + 1]; j--)	//j是当前数的前一个位置
		{
			swap(arr, j, j + 1);
		}
	}
}

1.7二分法
1.7.1在一个有序数组中，找某个数是否存在
	遍历O(N)
找mid值，若大于num，右边的数不要了；若小于num，左边的数不要了
O(log2N)，写作O(logN)

1.7.2在一个有序数组中，找>=某个数最左侧的位置
	假设找>=3的最左侧的位置。二分，mid满足，用t记录索引，往左找；二分，mid不满足，往右找；二分，mid满足，是否比t索引更小，更新t；……；直到二分到结束为止。

1.7.3局部最小值问题
	arr无序，任意相邻数一定不相等，求一个局部最小的位置，好于O(N)。
	局部最小：arr[0] < arr[1]，0位置是局部最小；arr[N-1] < arr[N-2]，N-1位置是局部最小；arr[i-1] < arr[i] <arr[i+1]，i位置是局部最小。
	先判断base case，0位置和N-1位置，若未返回：左侧单调递减，右侧单调递增，则内部必存在一个拐点，也就是局部最小点。二分，mid若满足要求则返回，不满足，假设mid-1<mid，那么左侧必存在一个拐点，即局部最小点。

1.8对数器
	方法a：想测的方法
	方法b：很好写，一定对，不考虑时间复杂度的方法
	随机样本产生器，产生样本分别给两个方法得到ret1和ret2，ret1==ret2则对；若不相等，先产生少量样本，把每个方法调整好，再增大样本数量。

1.9递归求最大值
	mid = (L+R)/2，可能溢出，mid = L + (R-L)/2 = L+((R-L)>>1)
1.9.1代码
int process(int* arr, int L, int R)
{
	if (L == R)
	{
		return arr[L];
	}
	int mid = L + ((R - L) >> 1);
	int leftMax = process(arr, L, mid);
	int rightMax = process(arr, mid + 1, R);
	return max(leftMax, rightMax);
}
	利用栈玩了一个遍历（树）
	a = 2, b = 2, d = 0		O(N)
1.9.2 master公式
T(N)=a\ast T(\frac{N}{b})+O(N^d)
	T(N)：母问题数据量
	a：子问题调用次数
	N/b：子过程规模等量
	O(N^d)：除了子问题的调用外，剩下的bigO
时间复杂度
{log}_ba<d,O(N^d)
{log}_ba>d,O(N^{{log}_ba})
{log}_ba==d,O(N^d\ast logN)
