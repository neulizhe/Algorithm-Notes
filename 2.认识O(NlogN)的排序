2认识O(NlogN)的排序
2.1归并排序
2.1.1原理
	从L到R分两半，M，分到数组的最小单位。先将左侧有序，再将右侧有序，再merge整合。整合时，准备两个指针一个辅助数组，哪个指针的数小就放到辅助数组里，然后移动指针和辅助数组的下标。
	先使用递归，找到最底下的两个数，merge，再依次传上去merge。
	外排序。
2.1.2时间复杂度
	a = 2，b = 2，d = 1；logab = d；O(NlogN)
2.1.3额外空间复杂的
	O(N)
2.1.4代码
class MergeSort
{
public:
	void mergeSort(int* arr, int len)
	{
		if (arr == NULL || len < 2)
		{
			return;
		}
		process(arr, 0, len - 1);
	}

	void process(int* arr, int L, int R)
	{
		if (L == R)
		{
			return;
		}
		int mid = L + ((R - L) >> 1);
		process(arr, L, mid);
		process(arr, mid + 1, R);
		merge(arr, L, mid, R);
	}

	void merge(int* arr, int L, int M, int R)
	{
		int* temp = new int[R - L + 1];
		for (int j = 0; j < R - L + 1; j++)
		{
			temp[j] = 0;
		}
		int i = 0;
		int p1 = L;
		int p2 = M + 1;
		while (p1 <= M && p2 <= R)
		{
			temp[i++] = arr[p1] <= arr[p2] ? arr[p1++] : arr[p2++];
		}
		while (p1 <= M)
		{
			temp[i++] = arr[p1++];
		}
		while (p2 <= R)
		{
			temp[i++] = arr[p2++];
		}
		for (i = 0; i < R-L+1; i++)
		{
			arr[L + i] = temp[i];
		}
	}
};

2.1.5优点
	比较行为没有被浪费，变成了整体有序的部分，往下传递进行merge。

2.2小和问题
2.2.1问题描述
	有一个数组，第i个位置左边比它小的数的求和，把所有的小和加起来。
2.2.2分析
	左边比它小的等价于，第i个位置右边有多少个比它大的数，它对小和的贡献为个数×arr[i]。左侧小时才产生小和，并且发生左侧copy。
	利用merge，在左严格小于右时，res+=左值*(r-p2+1)。
	注意，当左右相等时，先copy右，边排序边计算小和。
2.2.3代码
class SmallSum
{
public:
	int smallSum(int* arr, int len)
	{
		if (arr == NULL || len < 2)
		{
			return 0;
		}
		return process(arr, 0, len - 1);
	}

	int process(int* arr, int l, int r)
	{
		if (l == r)
		{
			return 0;
		}
		int mid = l + ((r - l) >> 1);
		return process(arr, l, mid) + process(arr, mid + 1, r) + merge(arr, l, mid, r);
	}

	int merge(int* arr, int L, int m, int r)
	{
		int* temp = new int[r - L + 1];
		for (int j = 0; j < r - L + 1; j++)
		{
			temp[j] = 0;
		}
		int i = 0;
		int p1 = L;
		int p2 = m + 1;
		int res = 0;
		while (p1 <= m && p2 <= r)
		{
			res += arr[p1] < arr[p2] ? (r - p2 + 1) * arr[p1] : 0;
			temp[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];
		}
		while (p1 <= m)
		{
			temp[i++] = arr[p1++];
		}
		while (p2 <= r)
		{
			temp[i++] = arr[p2++];
		}
		for (i = 0; i < r - L + 1; i++)
		{
			arr[L + i] = temp[i];
		}
		return res;
	}
};

2.3逆序对问题
2.3.1问题描述
	在一个数组中，左边的数如果比右边的数大，则这两个数构成一个逆序对，请打印所有逆序对。
2.3.2分析
	右边比左边小，跟merge一样。
2.3.4代码（部分）
		while (p1 <= m && p2 <= r)
		{
			res += arr[p1] > arr[p2] ? (r - p2 + 1) : 0;
			temp[i++] = arr[p1] > arr[p2] ? arr[p1++] : arr[p2++];
		}

2.4快速排序（荷兰国旗问题）
2.4.1问题描述
	(1) 给定一个数组arr，和一个数num，请把小于等于num的数放在数组的左边，大于num的数放在数组的右边。要求额外空间复杂度O(1)，时间复杂度O(N)
	(2) 小于放左边，等于放中间，大于放右边
2.4.2分析
	(1) 准备一个小于等于区域的右边界，和i。[i]≤num，[i]和≤区域的下一个数交换，≤区右扩，i++；[i]>num，i++；直到i越界。
	(2) 准备一个小于区的右边界和大于区的左边界，分别位于两端，和i。[i]<num，[i]和＜区域的下一个数交换，＜区右扩，i++；[i]=num，i++；[i]>num，[i]和＞区域的前一个数交换，i原地不动（因为换过来的数是新来的，没见过）；直到＞区与i撞上了停。（压缩待定区域）
 
2.4.3快排1.0
	一个数组，拿最后一个数当作num，小于等于放左边，大于放右边。分好后，把num和大于区的第一个数交换（这样这个数就处在正确位置上了，固定）。接下来对左右两个区域递归，做同样的操作。O(N²)
 
2.4.4快排2.0
	拿最后一个数，把数组分为小于区，等于区，大于区。把num和大于区第一个数交换，一次搞定一批数，再在左右两区域递归。O(N²)
 
2.4.5快排3.0
	当前两个版本，划分值选的很偏时，会出现差情况。好情况是划分值打到中间，master公式a=2，b=2，d=1，O(NlogN)。越偏越会趋近于O(N²)。
	随机选一个数，把它放到最后一个位置上，再进行划分操作。
 
2.4.6代码
class QuickSort
{
public:
	void quickSort(int* arr, int len)
	{
		if (arr == NULL || len < 2)
		{
			return;
		}
		process(arr, 0, len - 1);
	}

	void process(int* arr, int L, int R)
	{
		if (L < R)
		{
			//swap
			int* p = partition(arr, L, R);
			process(arr, L, p[0] - 1);
			process(arr, p[1] + 1, R);
		}
	}
	//处理arr[l..r]的函数
	//默认以arr[r]做划分，arr[r]->p <p ==p >p
	//返回等于区域（左边界，右边界），所以返回一个长度为2的数组res，res[0] res[1]
	int* partition(int* arr, int L, int R)
	{
		int less = L - 1;	//<区右边界（-1）
		int more = R;	//>区左边界（R，因为划分值是arr[R]，所以R位置是大于区左边界）
		while (L < more)	//L表示当前数的位置 arr[R]->划分值（当前数未撞到大于区边界）
		{
			/*
			less [L                     |R(==more)]
			后面less和more都是该区域最边界的索引，符合该区域要求，即less是小于区最后一个数，more是大于区第一个数
			*/
			if (arr[L] < arr[R])	//当前数 < 划分值
			{
				swap(arr, ++less, L++);	//交换小于区的下一个数++less和当前数L++
			}
			else if (arr[L] > arr[R])	//当前数 > 划分值
			{
				swap(arr, --more, L);	//交换大于区的前一个数mroe--和当前数L，L原地不动，因为换过来的数是新的
			}
			else
			{
				L++;	//等于，L++
			}
		}
		swap(arr, more, R);	//交换大于区的第一个数和最后一个数R
		int p[] = { less + 1,more };	//返回等于区域，less+1和more（==之前的R）
		return p;
	}

	void swap(int* arr, int i, int j)
	{
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
};
