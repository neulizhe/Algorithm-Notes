4链表
4.1哈希表、有序表（详见STL）
	UnOrderedMap或UnSortedMap、OrderedMap或OrderedSet - > C++
	Map是key-value；Set是key。
	哈希表在使用时认为增删改查的时间是常数级别的。key是基础数据直接copykey；key是自定义数据类型，key占用的空间8字节（内存地址）。
	有序表按key有序组织，性能略差，时间复杂度O(logN)。放入有序表的东西，如果不是基础类型，必须提供比较器。

4.2链表
4.2.1水题
	如何反转单向链表和反转双向链表。
	换头操作需要让函数返回值类型为Node。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev=NULL;
        ListNode* cur=head;
        while(cur)
        {
            ListNode* temp=cur->next;
            cur->next=prev;
            prev=cur;
            cur=temp;
        }
        return prev;
    }
};

递归的三个条件：大问题拆成两个子问题；子问题求解方式和大问题一样；存在最小子问题。
递：一直拆到一个元素->NULL；归：head.next.next=head; head.next=NULL;
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode* newHead = reverseList(head->next);  //对除去头节点外的部分进行同样操作
        head->next->next = head;
        head->next = NULL;
        return newHead;
    }
};
4.2.2打印两个有序链表的公共部分
	给定两个有序链表的头指针head1和head2，打印两个链表的公共部分。两个链表长度之和为N，时间复杂度要求O(N)，额外空间复杂度O(1)。
	谁小谁移动，相等打印且同时移动，有一个越界就停（while）。
4.2.3面试时链表解题的方法论
	笔试，不用太在乎空间复杂度，一切为了时间复杂度。
	面试，时间复杂度依然放在第一位，但一定要找到空间最省的方法。
重要技巧：
	额外数据结构记录（哈希表等）
	快慢指针
4.2.4判断一个单链表是否为回文结构
	正着念和反着念一样，也可以理解为有一个对称轴，两边对称。
笔试：放到栈里，弹出的顺序就是逆序的顺序。从头遍历链表，同时出栈。
省一半空间：只把右边（快慢指针）的放入栈中，从头遍历链表，同时出栈，栈空了停，每一步都一样就是回文。
	快慢指针：快指针每次走2步，慢指针每次走1步，快指针走完的时候，慢指针在中点位置。要根据长度奇偶来定制快慢指针（coding问题，边界问题）！
	时间复杂度O(N)，额外空间复杂度O(1)。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head == nullptr) {
            return true;
        }

        // 找到前半部分链表的尾节点并反转后半部分链表
        ListNode* firstHalfEnd = endOfFirstHalf(head);
        ListNode* secondHalfStart = reverseList(firstHalfEnd->next);

        // 判断是否回文
        ListNode* p1 = head;
        ListNode* p2 = secondHalfStart;
        bool result = true;
        while (result && p2 != nullptr) {
            if (p1->val != p2->val) {
                result = false;
            }
            p1 = p1->next;
            p2 = p2->next;
        }        

        // 还原链表并返回结果
        firstHalfEnd->next = reverseList(secondHalfStart);
        return result;
    }

    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while (curr != nullptr) {
            ListNode* nextTemp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }

    ListNode* endOfFirstHalf(ListNode* head) {
        ListNode* fast = head;
        ListNode* slow = head;
        while (fast->next != nullptr && fast->next->next != nullptr) {
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
};
4.2.5单链表按某值划分为左小、中等、右大
笔试：Node类型的数组，遍历把链表的每个节点放入数组中，partition，再变回链表。
面试：6个指针，小于头、小于尾、等于头、等于尾、大于头、大于尾，初始化全指向空。遍历链表，把每一个节点加到对应区域的子链表中，更改头/尾指针的指向。最后将三个区域连接。注意：可能存在没有某区域的情况，因此重连时要讨论清楚边界。
#include<iostream>
using namespace std;

struct ListNode {
	int val;
	ListNode* next;
	ListNode() : val(0), next(nullptr) {}
	ListNode(int x) : val(x), next(nullptr) {}
	ListNode(int x, ListNode* next, ListNode* rand) : val(x), next(next) {}
};

class SmallerEqualBigger
{
public:
	ListNode* listPartition(ListNode* head, int pivot)
	{
		ListNode* sH = NULL;
		ListNode* sT = NULL;
		ListNode* eH = NULL;
		ListNode* eT = NULL;
		ListNode* bH = NULL;
		ListNode* bT = NULL;
		ListNode* next = NULL;

		while (head != NULL)
		{
			//把头（cur）断开
			next = head->next;
			head->next = NULL;
			if (head->val < pivot)
			{
				if (sH == NULL)
				{
					sH = head;
					sT = head;
				}
				else
				{
					sT->next = head;
					sT = head;
				}
			}
			else if (head->val == pivot)
			{
				if (eH == NULL)
				{
					eH = head;
					eT = head;
				}
				else
				{
					eT->next = head;
					eT = head;
				}
			}
			else
			{
				if (bH == NULL)
				{
					bH = head;
					bT = head;
				}
				else
				{
					bT->next = head;
					bT = head;
				}
			}
			head = next;	//更新头节点，往下走
		}

		if (sT != NULL)	//如果有小于区域
		{
			sT->next = eH;	//小于区尾连等于区头
			//如果等于区有东西，那么eT就是eT，否则用小于区的尾连大于区的头，eT=sT
			//谁去连大于区的头，谁就是eT
			eT = eT == NULL ? sT : eT;	
		}

		if (eT != NULL)	//如果小于区和等于区不是都没有
		{
			eT->next = bH;
		}
		return sH != NULL ? sH : (eH != NULL ? eH : bH);
	}

};
4.2.6复制含有随即指针节点的链表
Class Node{
	int value;
	Node next;
	Node rand;
	Node(int val){
		value = val;
	}
}
	rand指针是单链表节点结构中新增的指针，rand可能指向链表中的任意一个节点，也可能指向null。给定一个由Node节点类型组成的无环单链表的头节点head，请实现一个函数完成这个链表的赋值，并返回复制的新链表的头节点。要求时间复杂度O(N)，额外空间复杂度O(1)。

利用额外空间：
	Hashmap。Key（老的节点），Value（老节点对应的克隆出来的新节点）。
	遍历链表，对每个节点进行克隆（new），放入Hashmap中。
	遍历链表，对每一个老节点：
new_cur = map.get(cur); 	//取出这个老节点对应的val（新节点）
new_cur->next=map.get(cur->next);	//新节点的next等于老节点next的val值
new_cur->rand=map.get(cur->rand);	//新节点的rand等于老节点rand的val值
 

不使用额外空间：利用位置关系省去map
	遍历链表，每一个节点copy一个新节点，放在该节点的后面。
	遍历链表，每个节点的next的rand等于该节点的rand的next。
	在next把新老链表分开。

 
#include<iostream>
#include<map>
using namespace std;

struct ListNode {
	int val;
	ListNode* next;
	ListNode* rand;
	ListNode() : val(0), next(nullptr), rand(nullptr) {}
	ListNode(int x) : val(x), next(nullptr), rand(nullptr) {}
	ListNode(int x, ListNode* next, ListNode* rand) : val(x), next(next), rand(rand) {}
};

class CopyListWithRandom
{
public:
	ListNode* copyListWithRand1(ListNode* head)
	{
		map<ListNode*, ListNode*>m;
		ListNode* cur = head;
		while (cur != NULL)
		{
			m.insert(make_pair(cur, new ListNode(cur->val)));
			cur = cur->next;
		}
		cur = head;
		while (cur != NULL)
		{	
			//假设it->first = 1，it->second = 1'
			map<ListNode*, ListNode*>::iterator it = m.find(cur);
			//1'->next = m.find(1->next)->second
			it->second->next = m.find(it->first->next)->second;
			//1'->rand = m.find(1->rand)->second
			it->second->rand = m.find(it->first->rand)->second;
			cur = cur->next;
		}
		return m.find(head)->second;
	}

	ListNode* copyListWithRand2(ListNode* head)
	{
		if (head == NULL)
		{
			return NULL;
		}
		ListNode* cur = head;
		ListNode* temp = NULL;
		// 1->2 变成 1->1'->2
		while (cur)
		{
			temp = cur->next;
			cur->next = new ListNode(cur->val);
			cur->next->next = temp;
			cur = temp;
		}
		cur = head;
		ListNode* curCopy = NULL;
		while (cur)
		{
			temp = cur->next->next;
			curCopy = cur->next;
			curCopy->rand = cur->rand != NULL ? cur->rand->next : NULL;
			cur = temp;
		}
		ListNode* res = head->next;
		cur = head;
		while (cur)
		{
			temp = cur->next->next;
			curCopy = cur->next;
			curCopy->next = temp != NULL ? temp->next : NULL;
			cur = temp;
		}
		return res;
	}
};
4.3两个单链表相交的一系列问题
给定两个可能有环也可能无环的单链表，头节点head1和head2。请实现一个函数，如果两个链表相交，请返回相交的第一个节点。如果不相交，返回null。
要求：如果两个链表长度之和为N，时间复杂度O(N)，额外空间复杂度O(1)。
4.3.1判断一个链表是否有环
	有环返回第一个入环节点，无环返回false。
方法一：
	Hashset，遍历下去，没遇过就存到set里，走到null则无环；如遇到在set里的了，就有环了。

方法二：快慢指针
	如果无环，快指针会走到空；如果有环，快慢指针会在环上相遇。相遇后快指针回到head，接下来两个指针每个都只走1步，一定会在入环节点相遇。
4.3.2判断是否相交
 
 
	end1 == end2，长链表先走差值步，再两个链表一起走，在相交节点相遇
 
	如果一个链表有环，一个链表无环，则这两个链表不可能相交。
(1)	两个链表都有环
 
	情况2：loop1 == loop2，然后把loop的位置当作终止节点，又变回了无环链表相交问题。
	情况1、3：loop1继续往下走，loop2不动，在转回到自己之前能遇到loop2，就是情况3；没遇到loop2，就是情况1。
	如果是情况1，返回null。
	如果是情况3，返回loop1或loop2都对。
#include<iostream>
#include<cmath>

struct ListNode
{
	int val;
	ListNode* next;
};

class FindFirstIntersectNode
{
public:
	ListNode* getIntersectNode(ListNode* head1, ListNode* head2)
	{
		if (head1 == NULL || head2 == NULL)
		{
			return NULL;
		}
		ListNode* loop1 = getLoopNode(head1);
		ListNode* loop2 = getLoopNode(head2);
		if (loop1 == NULL && loop2 == NULL)
		{
			return noLoop(head1, head2);
		}
		if (loop1 != NULL && loop2 != NULL)
		{
			return bothLoop(head1, loop1, head2, loop2);
		}
		return NULL;
	}

	//找到链表第一个入环节点，如果无环，返回NULL
	ListNode* getLoopNode(ListNode* head)
	{
		if (head == NULL || head->next == NULL || head->next->next == NULL)
		{
			return NULL;
		}
		ListNode* slow = head->next;
		ListNode* fast = head->next->next;
		while (slow != fast)
		{
			if (fast->next == NULL || fast->next->next == NULL)
			{
				return NULL;
			}
			slow = slow->next;
			fast = fast->next;
		}
		fast = head;	//从头节点重新走
		while (slow != fast)
		{
			slow = slow->next;
			fast = fast->next;
		}
		return slow;
	}

	ListNode* noLoop(ListNode* head1, ListNode* head2)
	{
		if (head1 == NULL && head2 == NULL)
		{
			return NULL;
		}
		ListNode* cur1 = head1;
		ListNode* cur2 = head2;
		int n = 0;
		while (cur1->next)
		{
			n++;
			cur1 = cur1->next;
		}//结束后cur1就是end1
		while (cur2->next)
		{
			n--;
			cur2 = cur2->next;
		}
		if (cur1 != cur2)
		{
			return NULL;
		}
		cur1 = n > 0 ? head1 : head2;	//长的头节点变成cur1
		cur2 = cur1 == head1 ? head2 : head1;	//短的头节点变成cur2
		n = abs(n);
		while (n)
		{
			n--;
			cur1 = cur1->next;
		}
		while (cur1 != cur2)
		{
			cur1 = cur1->next;
			cur2 = cur2->next;
		}
		return cur1;
	}

	ListNode* bothLoop(ListNode* head1, ListNode* loop1, ListNode* head2, ListNode* loop2)
	{
		ListNode* cur1 = NULL;
		ListNode* cur2 = NULL;
		if (loop1 == loop2)
		{
			cur1 = head1;
			cur2 = head2;
			int n = 0;
			while (cur1 != loop1)
			{
				n++;
				cur1 = cur1->next;
			}
			while (cur2 != loop2)
			{
				n--;
				cur2 = cur2->next;
			}
			cur1 = n > 0 ? head1 : head2;
			cur2 = cur1 == head1 ? head2 : head1;
			n = abs(n);
			while (n != 0)
			{
				n--;
				cur1 = cur1->next;
			}
			while (cur1 != cur2)
			{
				cur1 = cur1->next;
				cur2 = cur2->next;
			}
			return cur1;
		}
		else
		{
			cur1 = loop1->next;
			while (cur1 != loop1)
			{
				if (cur1 == loop2)
				{
					return loop1;
				}
				cur1 = cur1->next;
			}
			return NULL;
		}

	}
};=
